
Go
Un ambiente de programación simple
28 Nov 2015
Tags: go

Timoteo Ponce
Software Developer, Swissbytes Ltda.
timoteo.ponce@swissbytes.ch
http://swissbytes.ch/
@timoteo_ponce

* Un poco de historia

* Go

Motivado por las necesidades de Google

- Simplicidad
- Eficiencia
- Seguridad
- Escalabilidad
- Concurrencia/Paralelismo
- Rápido ciclo de desarrollo

* Autores

.image team.jpg

* Qué es Go?


Go es un lenguaje de programación open source que facilita la creación de software:


- Simple
- Confiable
- Eficiente

.image gopher1.jpg

* Qué es Go?

- Un proyecto open source (BSD)
- Un lenguaje de programación multi-paradigma (OO,funcional,procedimental)
- Un ambiente de ejecución (like JVM, CLR)
- Un compilador
- Muchas librerías poderosas
- Muchas herramientas (build,fetch,document,format)
- Mucha documentación

* Que es Go?

.play hello.go

- C-family
- Compilado a código nativo
- Soporte nativo de UTF-8, concurrencia, interfaces, JSON...

* Que es Go?

.play hello2.go

- Sintáctica y semánticamente simple
- Tipos y compilados estáticos

* Que es Go?

.play hello3.go

- Estructurado
- Funcional
- Orientado a objetos (Alan Kay style)

* Cómo se ve un programa Go?

.image disposition.jpg 550 _

* Timeline 

- 2009 Lanzamiento público 0.5
- 2012 Lanzamiento 1.0 
- 2013 Lanzamiento 1.1, mejora de rendimiento del 40%
- 2013 Lanzamiento 1.2, mejoras a librerías SQL
- 2014 Lanzamiento 1.3, bugfixing
- 2014 Lanzamiento 1.4, mejoras a librerías de red
- 2015 Lanzamiento 1.5, mejoras al ambiente y entorno de ejecución 

* Diseño

Go esta diseñado para ser:

- Ligero, evitando repeticiones innecesarias
- Orientado a objetos, pero no en la forma usual
- Concurrente, de una forma que te mantiene cuerdo
- Robusto, de una forma segura

* Principios

* Principios: Codigo simple y conciso

Go es un lenguaje sencillo de leer y de interpretar

#- lenguaje corto e integrado
#- características esenciales y estables

  Production  = production_name "=" [ Expression ] "." .
  Expression  = Alternative { "|" Alternative } .
  Alternative = Term { Term } .
  Term        = production_name | token [ "…" token ] | Group | Option | Repetition .
  Group       = "(" Expression ")" .
  Option      = "[" Expression "]" .
  Repetition  = "{" Expression "}" .
  |   alternation
  ()  grouping
  []  option (0 or 1 times)
  {}  repetition (0 to n times)

*Resultado*: Puedes mantener el lenguaje en tu cabeza sin mucho esfuerzo

* Principios: Codigo simple y conciso
Main.java

  package main;
  public class Main{
    public static void main(String[] args){
      System.out.println("Hello");
    }
  }

hello.go

.play hello.go

* Principios: Integración con librerias

Go es un lenguaje que no necesita manejo externo de librerías

- Las librerías se definen e importan automáticamente en código

  package main

  import (
    "fmt"
    "os"
    "github.com/tealeg/xlsx"
  )
  
  func main(){
    ...
  }

*Resultado*: Las aplicaciones son cortas y bien especificadas, incluyendo
sus dependencias externas

* Principios: OO con composiciones

Go es OO pero no en la forma usual

- no existen clases ni herencias, sino tipos de datos con comportamiento
- no hay herencia, sino datos con comportamiento

  type LoginData struct {
    name string
    password string
  }

  func (r *ReportData) Hash() string {
    return md5.Sum(string + password)
  }

  hash = LoginData{name:"timo", password: "123"}.Hash()

*Resultado*: Pequeñas piezas conectadas a través de pequeñas interfaces

* Principios: Concurrencia

Go provee un sistema de concurrencia diferente

- Routines en vez de hilos
- Channels y Queues en vez de synchronized

.play routine.go /^func main/,/^}/

*Resultado*: Código concurrente simple y seguro

* Principios: Manejo de errores, no excepciones

Go quiere que tus programas sean estables

- No existen excepciones, sino errores
- Los errores deben manejarse explícitamente

.play readfile.go /^func main/,/^}/

* Principios: Las pruebas son esenciales

- go test

.code tests/readfile.go  /^func Sinonimo/,/^}/

.code tests/readfile_test.go /^func TestSinonimo/,/^}/

* Herramientas

* Herramientas

Go define un entorno de desarrollo completo

- go run

  Compilar y ejecutar el programa principal

- go get

  Recolectar dependencias

- go build

  Construir un paquete binario nativo

- go install

  Instalar el paquete binario nativo en el sistema local

#- go fmt
#  Dar formato a los archivos de código fuente

* Quiénes lo usan?

- Google
- BBC
- Bitbucket
- Github
- Cloud foundry
- Dropbox
- Facebook
- Heroku
- Intel
- Twitter

* Y una cosa mas


   Go Mobile

Y muchos mas https://github.com/golang/go/wiki/GoUsers

* Preguntas?
