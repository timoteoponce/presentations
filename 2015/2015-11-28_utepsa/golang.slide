
Go
Un ambiente de programación simple
28 Nov 2015
Tags: go

Timoteo Ponce
Senior Software Developer, Swissbytes Ltda.
timoteo.ponce@swissbytes.ch
http://swissbytes.ch/
@timoteo_ponce

* Un poco de historia

* Go

Motivado por las necesidades de Google

- Simplicidad
- Eficiencia
- Seguridad
- Escalabilidad
- Concurrencia/Paralelismo
- Rápido ciclo de desarrollo

* Qué es Go?

- Un proyecto open source (BSD)
- Un lenguaje de programación multi-paradigma (OO,funcional,procedimental)
- Un ambiente de ejecución (like JVM, CLR)
- Un compilador
- Muchas librerías poderosas
- Muchas herramientas (build,fetch,document,format)
- Mucha documentación

* Que es Go?

.play hello.go

* Que es Go?

.play hello2.go

* Que es Go?

.play hello3.go



* Timeline 

- 2009 Lanzamiento público 0.5
- 2012 Lanzamiento 1.0 
- 2013 Lanzamiento 1.1, mejora de rendimiento del 40%
- 2013 Lanzamiento 1.2, mejoras a librerías SQL
- 2014 Lanzamiento 1.3, bugfixing
- 2014 Lanzamiento 1.4, mejoras a librerías de red
- 2015 Lanzamiento 1.5, mejoras al ambiente y entorno de ejecución 

* Diseño

Go esta diseñado para ser:

- Ligero, evitando repeticiones innecesarias
- Orientado a objetos, pero no en la forma usual
- Concurrente, de una forma que te mantiene cuerdo
- Robusto, de una forma segura

* Principios

* Principios: Codigo simple y corto

Go es un lenguaje sencillo de leer y de interpretars

- lenguaje corto e integrado
- características esenciales y estables

  Production  = production_name "=" [ Expression ] "." .
  Expression  = Alternative { "|" Alternative } .
  Alternative = Term { Term } .
  Term        = production_name | token [ "…" token ] | Group | Option | Repetition .
  Group       = "(" Expression ")" .
  Option      = "[" Expression "]" .
  Repetition  = "{" Expression "}" .
  |   alternation
  ()  grouping
  []  option (0 or 1 times)
  {}  repetition (0 to n times)

*Resultado*: Puedes mantener el lenguaje en tu cabeza sin mucho esfuerzo

* Principios: Integración con librerias

Go es un lenguaje que no necesita manejo externo de librerías

- Las librerías se definen e importan automáticamente en código
- Incluye librerías de alta gama

  package main

  import (
    "fmt"
    "os"
    "github.com/tealeg/xlsx"
  )
  
  func main(){
    ...
  }

*Resultado*: Las aplicaciones son cortas y bien especificadas, incluyendo
sus dependencias externas

* Principios: OO con composiciones

Go es OO pero no en la forma usual

- no existen clases, sino tipos de datos con comportamiento
- no hay herencia, sino datos con comportamiento

  type LoginData struct {
    name string
    password string
  }

  func (r *ReportData) Hash() string {
    return md5.Sum(string + password)
  }

  hash = LoginData{name:"timo", password: "123"}.Hash()

*Resultado*: Pequeñas piezas conectadas a través de pequeñas interfaces

* Principios: Concurrencia

Go provee un sistema de concurrencia diferente

- Routines en vez de hilos
- Channels y Queues en vez de synchronized

.play routine.go /^func main/,/^}/

*Resultado*: Código concurrente simple y seguro

* Herramientas

* Herramientas

Go define un entorno de desarrollo completo

- go run
- go get
- go build
- go install
- go fmt

* Pruebas

- go test


* Preguntas?
